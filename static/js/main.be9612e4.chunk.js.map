{"version":3,"sources":["gpx-parser.ts","geo-helpers.ts","DataSource.tsx","dms.ts","ArcDisplay.tsx","WorstPoints.tsx","Map.tsx","StatsDisplay.tsx","MainView.tsx","App.tsx","index.tsx"],"names":["gpxParser","require","EARTH_RADIUS","calculateBestArc","points","pt1","pt2","length","findMaxVectorFromArc","arc","lat","lon","maxDistance","point","d","Math","abs","crossTrackDistance","closestPoint","findClosestPointOnArc","adjustArc","div","startToMidPoints","endToMidPoints","distance","start","end","push","startToMidMaxVector","endToMidMaxVector","dLat","dLon","guess","avgDistance","error","results","i","newResults","rad2deg","radians","PI","deg2rad","degrees","pt","δ13","θ13","initialBearingInDegrees","θ12","asin","sin","φ1","λ1","φ2","Δφ","Δλ","a","cos","c","atan2","sqrt","x","y","wrap360","recurse","dLast","depth","dStart","dEnd","dMax","max","mid","λ2","Bx","By","φ3","λ3","midpoint","DEFAULT_FILTER_POINTS_OPTIONS","minDistanceBetweenPoints","DataSource","props","handleFileChange","React","useCallback","args","currentTarget","files","fr","FileReader","onload","options","reqOptions","bestArc","lastPoint","lastPointDistanceFromArc","distanceFromArc","console","log","geoFilterPoints","gpx","tracks","track","isNaN","gpxGetPoints","str","parser","parse","gpxParse","result","onChange","readAsText","style","width","margin","type","formatcoords","toDmsString","format","useStyles","makeStyles","theme","root","label","display","fontWeight","value","whiteSpace","ArcDisplay","classes","undefined","className","WorstPoints","numberOfPoints","useState","setPoints","useEffect","time","toISOString","latLon","toFixed","errorVal","sort","b","slice","handleRowClick","onPointClick","TableContainer","component","Paper","flexGrow","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","map","selected","selectedWorstPoint","WorstPointsTableRow","onRowClick","onClick","evt","cursor","Map","bounds","setBounds","trackPositions","setTrackPositions","bestArcPositions","setBestArcPositions","worstPointPolyPositions","setWorstPointPolyPositions","positions","extend","LatLngBounds","MapContainer","boundsOptions","padding","height","TileLayer","attribution","url","Polyline","pathOptions","color","StatsDisplay","flexDirection","Stat","stats","min","units","mean","sum","stdDeviation","MainView","setBestArc","setStats","setSelectedWorstPoint","distanceArcStartEnd","Number","MAX_SAFE_INTEGER","distances","sumOfSquares","pow","calculateStdDeviation","calculateStats","handleWorstPointClick","worstPointsArc","marginRight","Typography","variant","overflow","flex","App","handleDataChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be9612e4.chunk.js","sourcesContent":["import {Point} from \"./geo-helpers\";\n\nconst gpxParser = require(\"../node_modules/gpxparser/src/GPXParser\");\n\nexport interface GpxMetadata {\n    name: string;\n    desc: string;\n    link: GpxLink;\n    author: GpxAuthor;\n    time: Date;\n}\n\nexport interface GpxAuthor {\n    name: string;\n    email: GpxEmail;\n    link: GpxLink;\n}\n\nexport interface GpxEmail {\n    id: string;\n    domain: string;\n}\n\nexport interface GpxLink {\n    href: string;\n    text: string;\n    type: string;\n}\n\nexport interface GpxWaypoint {\n    name: string;\n    cmt: string;\n    desc: string;\n    lat: number;\n    lon: number;\n    ele: number;\n    time: Date;\n}\n\nexport interface GpxTrack {\n    name: string;\n    cmt: string;\n    desc: string;\n    src: string;\n    number: string;\n    link: string;\n    type: string;\n    points: GpxPoint[];\n    distance: GpxDistance;\n    elevation: GpxElevation;\n    slopes: number[];\n}\n\nexport interface GpxRoute {\n    name: string;\n    cmt: string;\n    desc: string;\n    src: string;\n    number: string;\n    link: string;\n    type: string;\n    points: GpxPoint[];\n    distance: GpxDistance;\n    elevation: GpxElevation;\n    slopes: number[];\n}\n\nexport interface GpxPoint {\n    lat: number;\n    lon: number;\n    ele: number;\n    time: Date;\n}\n\nexport interface GpxDistance {\n    total: number;\n    cumul: number;\n}\n\nexport interface GpxElevation {\n    max: number;\n    min: number;\n    pos: number;\n    neg: number;\n    avg: number;\n}\n\nexport interface Gpx {\n    xmlSource: Document;\n    metadata: GpxMetadata;\n    waypoints: GpxWaypoint[];\n    tracks: GpxTrack[];\n    routes: GpxRoute[];\n}\n\nexport function gpxParse(str: string): Gpx {\n    const parser = new gpxParser();\n    parser.parse(str);\n    return parser as Gpx;\n}\n\nexport function gpxGetPoints(gpx: Gpx): Point[] {\n    const results = [];\n    for (const track of gpx.tracks) {\n        for (const pt of track.points) {\n            if (isNaN(pt.lat) || isNaN(pt.lon)) {\n                continue;\n            }\n            results.push(pt);\n        }\n    }\n    return results;\n}","// see http://www.movable-type.co.uk/scripts/latlong.html\n\nconst EARTH_RADIUS = 6371000;\n\nexport interface Point {\n    time?: Date;\n    lat: number;\n    lon: number;\n}\n\nexport interface Arc {\n    start: Point;\n    end: Point;\n}\n\nexport function calculateBestArc(points: Point[]): Arc {\n    const pt1 = points[0];\n    const pt2 = points[points.length - 1];\n    const firstGuess = {\n        start: {\n            lat: pt1.lat,\n            lon: pt1.lon\n        },\n        end: {\n            lat: pt2.lat,\n            lon: pt2.lon\n        }\n    }\n\n    function findMaxVectorFromArc(arc: Arc, points: Point[]): [number, number, number] {\n        let lat = 0;\n        let lon = 0;\n        let maxDistance = -1;\n        for (const point of points) {\n            const d = Math.abs(crossTrackDistance(point, arc));\n            if (d > maxDistance) {\n                const closestPoint = findClosestPointOnArc(arc, point);\n                lat = point.lat - closestPoint.lat;\n                lon = point.lon - closestPoint.lon;\n                maxDistance = d;\n            }\n        }\n        return [lat, lon, maxDistance];\n    }\n\n    function adjustArc(arc: Arc, div: number): { arc: Arc, error: number } {\n        const startToMidPoints = [];\n        const endToMidPoints = [];\n        for (const point of points) {\n            if (distance(point, arc.start) < distance(point, arc.end)) {\n                startToMidPoints.push(point);\n            } else {\n                endToMidPoints.push(point);\n            }\n        }\n\n        const startToMidMaxVector = findMaxVectorFromArc(arc, startToMidPoints);\n        const endToMidMaxVector = findMaxVectorFromArc(arc, endToMidPoints);\n\n        const dLat = arc.end.lat - arc.start.lat;\n        const dLon = arc.end.lon - arc.start.lon;\n        const guess: Arc = {\n            start: {\n                lat: arc.start.lat + (startToMidMaxVector[0] / div) - dLat,\n                lon: arc.start.lon + (startToMidMaxVector[1] / div) - dLon\n            },\n            end: {\n                lat: arc.end.lat + (endToMidMaxVector[0] / div) + dLat,\n                lon: arc.end.lon + (endToMidMaxVector[1] / div) + dLon\n            }\n        }\n        const avgDistance = (startToMidMaxVector[2] + endToMidMaxVector[2]) / 2;\n\n        return {\n            arc: {\n                start: findClosestPointOnArc(guess, pt1),\n                end: findClosestPointOnArc(guess, pt2)\n            },\n            error: avgDistance\n        };\n    }\n\n    let div = 10;\n    let results = adjustArc(firstGuess, div);\n    for (let i = 0; i < 50; i++) {\n        const newResults = adjustArc(results.arc, div);\n        if (newResults.error < results.error) {\n            results = newResults;\n        } else {\n            div += 1;\n        }\n    }\n    return results.arc;\n}\n\nexport function rad2deg(radians: number): number {\n    return radians * 180.0 / Math.PI;\n}\n\nexport function deg2rad(degrees: number): number {\n    return degrees * Math.PI / 180.0;\n}\n\nexport function midpoint(pt1: Point, pt2: Point): Point {\n    const φ1 = deg2rad(pt1.lat); // φ, λ in radians\n    const φ2 = deg2rad(pt2.lat);\n    const λ1 = deg2rad(pt1.lon);\n    const λ2 = deg2rad(pt2.lon);\n\n    const Bx = Math.cos(φ2) * Math.cos(λ2 - λ1);\n    const By = Math.cos(φ2) * Math.sin(λ2 - λ1);\n    const φ3 = Math.atan2(\n        Math.sin(φ1) + Math.sin(φ2),\n        Math.sqrt((Math.cos(φ1) + Bx) * (Math.cos(φ1) + Bx) + By * By)\n    );\n    const λ3 = λ1 + Math.atan2(By, Math.cos(φ1) + Bx);\n\n    return {\n        lat: rad2deg(φ3),\n        lon: rad2deg(λ3)\n    }\n}\n\nexport function crossTrackDistance(pt: Point, arc: Arc): number {\n    const δ13 = distance(arc.start, pt) / EARTH_RADIUS;\n    const θ13 = deg2rad(initialBearingInDegrees(arc.start, pt));\n    const θ12 = deg2rad(initialBearingInDegrees(arc.start, arc.end));\n\n    const δxt = Math.asin(Math.sin(δ13) * Math.sin(θ13 - θ12));\n\n    return δxt * EARTH_RADIUS;\n}\n\nexport function distance(pt1: Point, pt2: Point): number {\n    const φ1 = deg2rad(pt1.lat), λ1 = deg2rad(pt1.lon);\n    const φ2 = deg2rad(pt2.lat), λ2 = deg2rad(pt2.lon);\n    const Δφ = φ2 - φ1;\n    const Δλ = λ2 - λ1;\n\n    const a = Math.sin(Δφ / 2)\n        * Math.sin(Δφ / 2)\n        + Math.cos(φ1)\n        * Math.cos(φ2)\n        * Math.sin(Δλ / 2)\n        * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const d = EARTH_RADIUS * c;\n\n    return d;\n}\n\nexport function initialBearingInDegrees(pt1: Point, pt2: Point): number {\n    const φ1 = deg2rad(pt1.lat);\n    const φ2 = deg2rad(pt2.lat);\n    const Δλ = deg2rad(pt2.lon - pt1.lon);\n\n    const x = Math.cos(φ1) * Math.sin(φ2) - Math.sin(φ1) * Math.cos(φ2) * Math.cos(Δλ);\n    const y = Math.sin(Δλ) * Math.cos(φ2);\n    const θ = Math.atan2(y, x);\n\n    const bearing = rad2deg(θ);\n\n    return wrap360(bearing);\n}\n\nexport function wrap360(degrees: number): number {\n    if (0 <= degrees && degrees < 360) {\n        return degrees\n    } // avoid rounding due to arithmetic ops if within range\n    return (degrees % 360 + 360) % 360; // sawtooth wave p:360, a:360\n}\n\nexport function findClosestPointOnArc(arc: Arc, pt: Point): Point {\n    // binary search the arc trying to find the closest point on the arc\n    // to pt.\n    function recurse(arc: Arc, pt: Point, dLast: number, depth: number): Point {\n        const dStart = distance(arc.start, pt);\n        if (dStart > dLast - 0.000001 || depth > 100) {\n            return arc.start;\n        }\n        const dEnd = distance(arc.end, pt);\n        const dMax = Math.max(dStart, dEnd);\n        const mid = midpoint(arc.start, arc.end);\n        if (dStart < dEnd) {\n            const newArc = {\n                start: arc.start,\n                end: mid\n            };\n            return recurse(newArc, pt, dMax, depth + 1);\n        } else {\n            const newArc = {\n                start: mid,\n                end: arc.end\n            };\n            return recurse(newArc, pt, dMax, depth + 1);\n        }\n    }\n\n    return recurse(arc, pt, EARTH_RADIUS, 0);\n}\n\nexport interface FilterPointsOptions {\n    minDistanceBetweenPoints?: number;\n}\n\nexport const DEFAULT_FILTER_POINTS_OPTIONS: Required<FilterPointsOptions> = {\n    minDistanceBetweenPoints: 5\n};\n\nexport function geoFilterPoints(points: Point[], options?: FilterPointsOptions): Point[] {\n    const reqOptions: Required<FilterPointsOptions> = {...DEFAULT_FILTER_POINTS_OPTIONS, ...options};\n\n    const results: Point[] = [];\n    const bestArc = calculateBestArc(points);\n    let lastPoint = points[0];\n    let lastPointDistanceFromArc = Math.abs(crossTrackDistance(lastPoint, bestArc));\n    results.push(points[0]);\n    for (let i = 1; i < points.length; i++) {\n        const pt = points[i];\n        const distanceFromArc = Math.abs(crossTrackDistance(pt, bestArc));\n        if (distance(lastPoint, pt) < reqOptions.minDistanceBetweenPoints\n            && distanceFromArc < lastPointDistanceFromArc) {\n            console.log(`skipped point: ${pt.lat}, ${pt.lon}`);\n            continue;\n        } else {\n            lastPointDistanceFromArc = distanceFromArc;\n            lastPoint = pt;\n            results.push(pt);\n        }\n    }\n    return results;\n}\n\nexport interface Stats {\n    sum: number;\n    mean: number;\n    stdDeviation: number;\n    min: number;\n    max: number;\n    distance: number;\n}\n\nexport function calculateStats(points: Point[], arc: Arc): Stats {\n    const distanceArcStartEnd = distance(arc.start, arc.end);\n    let sum = 0;\n    let min = Number.MAX_SAFE_INTEGER;\n    let max = 0;\n    const distances: number[] = [];\n    for (const point of points) {\n        const d = Math.abs(crossTrackDistance(point, arc));\n        distances.push(d);\n        sum += d;\n        min = Math.min(min, d);\n        max = Math.max(max, d);\n    }\n    const mean = sum / points.length;\n\n    function calculateStdDeviation() {\n        let sumOfSquares = 0;\n        for (const d of distances) {\n            sumOfSquares += Math.pow(d - mean, 2);\n        }\n        return Math.sqrt(sumOfSquares / distances.length);\n    }\n\n    return {\n        sum,\n        min,\n        max,\n        mean,\n        stdDeviation: calculateStdDeviation(),\n        distance: distanceArcStartEnd\n    }\n}","import React, {ChangeEvent} from 'react';\nimport {gpxParse, gpxGetPoints} from \"./gpx-parser\";\nimport {geoFilterPoints, Point} from \"./geo-helpers\";\n\nexport interface DataSourceProps {\n    onChange: (points: Point[]) => void;\n}\n\nexport function DataSource(props: DataSourceProps) {\n    const handleFileChange = React.useCallback((args: ChangeEvent<HTMLInputElement>) => {\n        if (!args.currentTarget.files) {\n            return;\n        }\n        const fr = new FileReader();\n        fr.onload = function () {\n            const gpxPoints = gpxGetPoints(gpxParse(fr.result as string));\n            const points = geoFilterPoints(gpxPoints);\n            props.onChange(points);\n        }\n        fr.readAsText(args.currentTarget.files[0]);\n    }, [props]);\n\n    return (<div style={{width: '150pt', margin: 'auto'}}>\n        Select a GPX file to analyze\n        <br/>\n        <input type=\"file\" onChange={handleFileChange}/>\n    </div>)\n}","const formatcoords = require(\"formatcoords\");\n\nexport function toDmsString(lat: number, lon: number): string {\n    return formatcoords(lat, lon).format('FFf');\n}\n","import {Arc} from \"./geo-helpers\";\nimport React from \"react\";\nimport {makeStyles} from \"@material-ui/core\";\nimport {toDmsString} from \"./dms\";\n\nexport interface ArcDisplayProps {\n    arc: Arc | undefined;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {},\n\n    label: {\n        display: 'inline-block',\n        fontWeight: 'bold',\n        width: '35pt'\n    },\n\n    value: {\n        display: 'inline',\n        whiteSpace: 'nowrap'\n    }\n}));\n\nexport function ArcDisplay(props: ArcDisplayProps) {\n    const classes = useStyles();\n    const start = props.arc ? toDmsString(props.arc.start.lat, props.arc.start.lon) : undefined;\n    const end = props.arc ? toDmsString(props.arc.end.lat, props.arc.end.lon) : undefined;\n\n    return (<div className={classes.root}>\n        <div>\n            <div className={classes.label}>Start</div>\n            <div className={classes.value}>{start}</div>\n        </div>\n        <div>\n            <div className={classes.label}>End</div>\n            <div className={classes.value}>{end}</div>\n        </div>\n    </div>);\n}","import React from \"react\";\nimport {Arc, crossTrackDistance, Point} from \"./geo-helpers\";\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\nimport {toDmsString} from \"./dms\";\n\nexport interface WorstPointsProps {\n    arc: Arc;\n    points: Point[];\n    numberOfPoints?: number;\n    selectedWorstPoint?: Point;\n    onPointClick: (pt: Point) => void;\n}\n\ninterface WorstPoint {\n    time: string;\n    latLon: string;\n    error: string;\n    errorVal: number;\n    point: Point;\n}\n\nexport function WorstPoints(props: WorstPointsProps) {\n    const numberOfPoints = props.numberOfPoints || 100;\n    const [points, setPoints] = React.useState<WorstPoint[]>([]);\n\n    React.useEffect(() => {\n        let worstDistance = 0;\n        let points: WorstPoint[] = [];\n        for (const point of props.points) {\n            const d = Math.abs(crossTrackDistance(point, props.arc));\n            if (d > worstDistance) {\n                points.push({\n                    time: point.time?.toISOString() || 'unknown',\n                    latLon: toDmsString(point.lat, point.lon),\n                    error: d.toFixed(1),\n                    errorVal: d,\n                    point: point\n                });\n                points = points.sort((a, b) => {\n                    return a.errorVal === b.errorVal ? 0 : (a.errorVal > b.errorVal ? -1 : 1);\n                });\n                points = points.slice(0, numberOfPoints);\n            }\n        }\n        setPoints(points);\n    }, [props.arc, props.points, numberOfPoints]);\n\n    const handleRowClick = React.useCallback((pt: WorstPoint) => {\n        props.onPointClick(pt.point);\n    }, [props.onPointClick]);\n\n    return (<TableContainer component={Paper} style={{flexGrow: 1, display: 'flex'}}>\n        <Table stickyHeader={true}>\n            <TableHead>\n                <TableRow>\n                    <TableCell>Time</TableCell>\n                    <TableCell>Lat/Lon</TableCell>\n                    <TableCell>Error</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {points.map((pt) => {\n                    let selected = false;\n                    if (props.selectedWorstPoint\n                        && props.selectedWorstPoint.lat === pt.point.lat\n                        && props.selectedWorstPoint.lon === pt.point.lon) {\n                        selected = true;\n                    }\n                    return (<WorstPointsTableRow\n                        key={pt.time + pt.latLon}\n                        pt={pt}\n                        selected={selected}\n                        onRowClick={handleRowClick}\n                    />)\n                })}\n            </TableBody>\n        </Table>\n    </TableContainer>);\n}\n\nfunction WorstPointsTableRow(props: { pt: WorstPoint, selected: boolean, onRowClick: (pt: WorstPoint) => void }) {\n    return (<TableRow\n        onClick={(evt: any) => props.onRowClick(props.pt)}\n        selected={props.selected}\n        style={{cursor: 'pointer'}}\n    >\n        <TableCell>{props.pt.time}</TableCell>\n        <TableCell>{props.pt.latLon}</TableCell>\n        <TableCell>{props.pt.error}m</TableCell>\n    </TableRow>);\n}","import {MapContainer, TileLayer, Polyline} from \"react-leaflet\";\nimport {Arc, findClosestPointOnArc, Point} from \"./geo-helpers\";\nimport React from \"react\";\nimport {FitBoundsOptions, LatLngBounds, LatLngExpression} from \"leaflet\";\n\nexport interface MapProps {\n    points: Point[];\n    bestArc?: Arc;\n    selectedWorstPoint?: Point;\n}\n\nexport function Map(props: MapProps) {\n    const [bounds, setBounds] = React.useState<LatLngBounds | undefined>(undefined);\n    const [trackPositions, setTrackPositions] = React.useState<LatLngExpression[] | undefined>(undefined);\n    const [bestArcPositions, setBestArcPositions] = React.useState<LatLngExpression[] | undefined>(undefined);\n    const [worstPointPolyPositions, setWorstPointPolyPositions] = React.useState<LatLngExpression[] | undefined>(undefined);\n\n    React.useEffect(() => {\n        if (props.bestArc) {\n            setBestArcPositions([\n                [props.bestArc.start.lat, props.bestArc.start.lon],\n                [props.bestArc.end.lat, props.bestArc.end.lon]\n            ]);\n        } else {\n            setBestArcPositions(undefined);\n        }\n    }, [props.bestArc]);\n\n    React.useEffect(() => {\n        let bounds: LatLngBounds | undefined = undefined;\n        const positions: LatLngExpression[] = [];\n        for (const point of props.points) {\n            const pt: [number, number] = [point.lat, point.lon];\n            positions.push(pt);\n            if (bounds) {\n                bounds.extend(pt);\n            } else {\n                bounds = new LatLngBounds(pt, pt);\n            }\n        }\n        setTrackPositions(positions);\n        setBounds(bounds);\n    }, [props.points]);\n\n    React.useEffect(() => {\n        if (props.selectedWorstPoint && props.bestArc) {\n            const pt = findClosestPointOnArc(props.bestArc, props.selectedWorstPoint);\n            setWorstPointPolyPositions([\n                [props.selectedWorstPoint.lat, props.selectedWorstPoint.lon],\n                [pt.lat, pt.lon]\n            ])\n        } else {\n            setWorstPointPolyPositions(undefined);\n        }\n    }, [props.points, props.selectedWorstPoint, props.bestArc]);\n\n    const boundsOptions: FitBoundsOptions = {\n        padding: [10, 10]\n    };\n    if (!bounds) {\n        return null;\n    }\n    return (<MapContainer bounds={bounds} boundsOptions={boundsOptions} style={{width: '100%', height: '100%'}}>\n        <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {worstPointPolyPositions\n            ? (<Polyline pathOptions={{color: 'green'}} positions={worstPointPolyPositions}/>)\n            : null}\n        {trackPositions ? (<Polyline pathOptions={{color: 'blue'}} positions={trackPositions}/>) : null}\n        {bestArcPositions ? (<Polyline pathOptions={{color: 'red'}} positions={bestArcPositions}/>) : null}\n    </MapContainer>);\n}","import {Stats} from \"./geo-helpers\";\n\nexport interface StatsDisplayProps {\n    stats: Stats\n}\n\nexport function StatsDisplay(props: StatsDisplayProps) {\n    return (<div style={{display: 'flex', flexDirection: 'column'}}>\n        <Stat label=\"Min\" value={props.stats.min} units=\"m\"/>\n        <Stat label=\"Max\" value={props.stats.max} units=\"m\"/>\n        <Stat label=\"Mean\" value={props.stats.mean} units=\"m\"/>\n        <Stat label=\"Sum\" value={props.stats.sum} units=\"m\"/>\n        <Stat label=\"StdDev\" value={props.stats.stdDeviation}/>\n        <Stat label=\"Distance\" value={props.stats.distance} units=\"m\"/>\n        <Stat label=\"Sum/Distance\" value={props.stats.sum / props.stats.distance} units=\"m\"/>\n    </div>)\n}\n\nfunction Stat(props: { label: string, value: number, units?: string }) {\n    return (<div style={{display: 'flex', flexDirection: 'row'}}>\n        <div style={{width: '100pt'}}>{props.label}</div>\n        <div>{(props.value || 0).toFixed(2)}{props.units || ''}</div>\n    </div>)\n}\n","import React from \"react\";\nimport {Arc, calculateBestArc, calculateStats, Point, Stats} from \"./geo-helpers\";\nimport {ArcDisplay} from \"./ArcDisplay\";\nimport {Typography} from \"@material-ui/core\";\nimport {WorstPoints} from \"./WorstPoints\";\nimport {Map} from \"./Map\";\nimport {StatsDisplay} from \"./StatsDisplay\";\n\nexport interface MainViewProps {\n    points: Point[];\n}\n\nexport function MainView(props: MainViewProps) {\n    const [bestArc, setBestArc] = React.useState<Arc | undefined>(undefined);\n    const [stats, setStats] = React.useState<Stats | undefined>(undefined);\n    const [selectedWorstPoint, setSelectedWorstPoint] = React.useState<Point | undefined>(undefined);\n\n    React.useEffect(() => {\n        const bestArc = calculateBestArc(props.points);\n        setBestArc(bestArc);\n        setStats(calculateStats(props.points, bestArc));\n    }, [props.points]);\n\n    const handleWorstPointClick = React.useCallback((pt) => {\n        setSelectedWorstPoint(pt);\n    }, [setSelectedWorstPoint]);\n\n    const worstPointsArc = bestArc;\n    return (<div style={{display: 'flex', flexDirection: 'column', flexGrow: 1}}>\n        <div style={{display: 'flex', flexDirection: 'row'}}>\n            <div style={{marginRight: '10pt'}}>\n                <Typography variant=\"h6\">Best Arc</Typography>\n                <ArcDisplay arc={bestArc}/>\n            </div>\n            <div>\n                <Typography variant=\"h6\">Stats</Typography>\n                {stats ? (<StatsDisplay stats={stats}/>) : null}\n            </div>\n        </div>\n        <div style={{display: 'flex', flexGrow: 1, overflow: 'hidden'}}>\n            <div style={{display: 'flex', flexDirection: 'column', flex: '50%'}}>\n                <Typography variant=\"h6\">Worst Points</Typography>\n                {worstPointsArc ? (<WorstPoints\n                    arc={worstPointsArc}\n                    points={props.points}\n                    selectedWorstPoint={selectedWorstPoint}\n                    onPointClick={handleWorstPointClick}/>) : null}\n            </div>\n            <div style={{flex: '50%'}}>\n                <Typography variant=\"h6\">Map</Typography>\n                <Map points={props.points} bestArc={bestArc} selectedWorstPoint={selectedWorstPoint}/>\n            </div>\n        </div>\n    </div>);\n}","import React from 'react';\nimport {DataSource} from \"./DataSource\";\nimport {MainView} from \"./MainView\";\nimport {Point} from \"./geo-helpers\";\n\nfunction App() {\n    const [points, setPoints] = React.useState<Point[] | undefined>(undefined);\n\n    const handleDataChange = React.useCallback((points: Point[]) => {\n        setPoints(points);\n    }, [setPoints]);\n\n    return points\n        ? (<MainView points={points}/>)\n        : (<DataSource onChange={handleDataChange}/>);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}